<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      internalLogLevel="Info"
      internalLogFile="c:\temp\p2p-Internal-Logs.txt">

	<!-- enable asp.net core layout renderers -->
	<extensions>
		<add assembly="NLog.Web.AspNetCore"/>
		<add assembly="NLog.Targets.Database" />
	</extensions>

	<!-- the targets to write to -->
	<targets>
		<!-- File Target for all log messages with basic details -->
		<target xsi:type="File" name="allfile" fileName="c:\temp\p2p-all-${shortdate}.log"
				layout="${longdate}|${event-properties:item=EventId:whenEmpty=0}|
				${level:uppercase=true}|${logger}|${message}
				${exception:format=tostring}" />

		<!-- File Target for own log messages with extra web details using some ASP.NET core renderers -->
		<!--<target xsi:type="File" name="ownFile-web" fileName="c:\temp\WebApiFsp-own-${shortdate}.log"
           layout="${longdate}|${event-properties:item=EventId:whenEmpty=0}|${level:uppercase=true}|${logger}|${message} ${exception:format=tostring}|url: ${aspnet-request-url}|action: ${aspnet-mvc-action}" />-->
		<target xsi:type="File" name="ownFile-web" fileName="c:\temp\p2p-own-${shortdate}.log">
			<layout xsi:type="JsonLayout" includeEventProperties="true">
				<attribute name="time" layout="${longdate}" />
				<attribute name="event" layout="${event-properties:item=EventId:whenEmpty=0}"/>
				<attribute name="level" layout="${level:upperCase=true}"/>
				<attribute name="logger" layout="${logger}"/>
				<attribute name="message" layout="${message}" />
				<attribute name="exception" layout="${exception:format=tostring}"/>
				<attribute name="url" layout="${aspnet-request-url}" />
				<attribute name="action" layout="${aspnet-mvc-action}" />
			</layout>
		</target>

		<!--Console Target for hosting lifetime messages to improve Docker / Visual Studio startup detection -->
		<target xsi:type="Console" name="lifetimeConsole"
				layout="${MicrosoftConsoleLayout}" />





		<target name="database" xsi:type="Database">
			<connectionString>
			 server=ANKIT; database=p2p; trusted_connection=true; Encrypt=False;
			 </connectionString>
			  <commandText>
				insert into dbo.NlogDBLog (
		    	Application, Logged, Level, Message,
			    Logger, CallSite, Exception
		 	    ) values (
		     	@application, @logged, @level, @message,
			 	@logger, @callSite, @exception
			 	);
		 	</commandText>
		 	<parameter name="@application" layout="AspNetCoreNlog"/>
		 	<parameter name="@logged" layout="${date}"/>
		 	<parameter name="@level" layout="${level}" />
		 	<parameter name="@message" layout="${message}" />
		 	<parameter name="@logger" layout="${logger}" />
		 	<parameter name="@callSite" layout="${callsite:filename=true}" />
		 	<parameter name="@exception" layout="${exception:tostring}" />
		 </target>
		


		<!--	<target name="database" xsi:type="Database" connectionString="${configsetting:item=ConnectionStrings.dbcs}"	-->

		<target name="database" xsi:type="Database" connectionString="server=ANKIT; database=p2p; trusted_connection=true; Encrypt=False;"
	 			dbProvider="Microsoft.Data.SqlClient.SqlConnection,Microsoft.Data.SqlClient"
	 			commandText="Insert into logs(Date,Level,Message,MachineName,Logger) values(
	 			@date,@level,@message,@machinename,@logger)">
	 		<parameter name="@date" layout="${date}" />
	 		<parameter name="@level" layout="${level}"/>
	 		<parameter name="@message" layout="${message}" />
	 		<parameter name="@machinename" layout="${machinename}" />
	  		<parameter name="@logger" layout="${logger}" />
	  	</target>




	</targets>


	<!-- rules to map from logger name to target -->
	<rules>
		<!--All logs, including from Microsoft-->
		<logger name="*" minlevel="Trace" writeTo="allfile" />

		<!--Output hosting lifetime messages to console target for faster startup detection -->
		<logger name="Microsoft.Hosting.Lifetime" minlevel="Info"
				writeTo="lifetimeConsole, ownFile-web" final="true" />

		<!--Skip non-critical Microsoft logs and so log only own logs (BlackHole) -->
		<logger name="Microsoft.*" maxlevel="Info" final="true" />
		<logger name="System.Net.Http.*" maxlevel="Info" final="true" />

		<logger name="*" minlevel="Trace" writeTo="ownFile-web" />

		<!--database logger -->
		<logger name="*" minlevel="Trace" writeTo="database" />


		<!--file database logger-->
		<!--Skip non-critical Microsoft logs and so log only own logs-->
		<!--<logger name="Microsoft.*" maxlevel="Info" final="true" />-->
		<!-- BlackHole without writeTo -->
		<!--<logger name="*" minlevel="Trace" writeTo="db" />-->


	</rules>
</nlog>